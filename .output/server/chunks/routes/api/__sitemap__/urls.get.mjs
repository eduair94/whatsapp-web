import{d as t,g as e}from"../../../_/nitro.mjs";import{promises as r}from"fs";import{join as o}from"path";import"os";import"url";import"http";import"https";import"events";import"zlib";import"@fastify/busboy";import"jsonwebtoken";import"node-forge";import"crypto";import"jwks-rsa";import"bcryptjs";import"mongoose";import"lru-cache";import"@unocss/core";import"@unocss/preset-wind3";import"devalue";import"consola";import"unhead";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"unhead/server";import"unhead/plugins";import"unhead/utils";import"vue-bundle-renderer/runtime";import"vue/server-renderer";import"node:path";import"node:crypto";const a=new Map,i=new Map;async function fetchUrlsFromAPI(t,e){let a=[];try{const i=[{limit:2e3,page:e+1}];for(const e of i){let r;try{const o=`http://104.234.204.107:3728/phone-numbers/search?${new URLSearchParams({limit:e.limit.toString(),page:e.page.toString(),bypassPagination:"true",includeCount:"false"}).toString()}`,i=new AbortController;r=setTimeout((()=>i.abort()),25e3);const s=await fetch(o,{signal:i.signal});if(clearTimeout(r),s.ok){const r=await s.json();r.success&&r.data&&Array.isArray(r.data.docs)&&(console.log(`[SITEMAP] Fetched ${r.data.docs.length} phone numbers from page ${e.page} for language ${t}`),r.data.docs.forEach((e=>{let r=e.number;if(r){r.includes("@")&&(r=r.split("@")[0]);const e="en"===t?`/${r}`:`/${t}/${r}`;a.push({loc:e,lastmod:(new Date).toISOString(),changefreq:"monthly",priority:.6})}})))}}catch(t){console.warn(`[SITEMAP] Failed to fetch phone numbers for page ${e.page}:`,t)}finally{r&&clearTimeout(r)}}if(0===e){const i=await async function(){try{const t=o(process.cwd(),"pages"),e=await r.readdir(t,{recursive:!0}),a=[];for(const t of e)if("string"==typeof t&&(t.endsWith(".vue")||t.endsWith(".ts")||t.endsWith(".js"))){if(t.includes("[")||t.includes("]"))continue;let e=t.replace(/\.(vue|ts|js)$/,"").replace(/index$/,"").replace(/\\/g,"/");e&&!e.startsWith("/")&&(e="/"+e);let r=.5;""===e||"/"===e?r=1:"/pricing"===e?r=.9:"/api-status"===e?r=.8:"/faqs"===e||"/database"===e?r=.7:"/stats"===e||"/history"===e?r=.6:"/terms"===e||"/privacy"===e?r=.5:"/auth"===e&&(r=.4),a.push({path:e,priority:r})}return console.log(`Found ${a.length} static pages:`,a.map((t=>t.path))),a}catch(t){return console.warn("Could not scan pages directory, falling back to hardcoded pages:",t),[{path:"",priority:1},{path:"/api-status",priority:.8},{path:"/pricing",priority:.9},{path:"/faqs",priority:.7},{path:"/terms",priority:.5},{path:"/privacy",priority:.5},{path:"/stats",priority:.6},{path:"/database",priority:.7},{path:"/history",priority:.6},{path:"/auth",priority:.4}]}}();i.forEach((e=>{const r="en"===t?e.path:`/${t}${e.path}`;a.unshift({loc:r||"/",lastmod:(new Date).toISOString(),changefreq:"weekly",priority:e.priority})})),console.log(`[SITEMAP] Added ${i.length} static pages for ${t} page ${e}`)}}catch(t){console.error("[SITEMAP] Error fetching phone numbers for sitemap:",t)}return a}const s=t((async t=>{const r=e(t),o=r.lang,s=r.page?parseInt(r.page,10):0,n=`sitemap:${o}:${s}`,p=a.get(n);if(p&&(c=p,Date.now()-c.timestamp<18e5))return console.log(`[SITEMAP] Returning cached URLs for ${o} page ${s} (${p.urls.length} URLs)`),[...p.urls];var c;const l=i.get(n);if(l)return console.log(`[SITEMAP] Waiting for pending request for ${o} page ${s}`),await l;const m=fetchUrlsFromAPI(o,s);i.set(n,m);try{console.log(`[SITEMAP] Fetching fresh URLs for ${o} page ${s}`);const t=await m,e={urls:[...t],timestamp:Date.now()};return a.set(n,e),console.log(`[SITEMAP] Cached ${t.length} URLs for ${o} page ${s}`),[...t]}catch(t){return console.error(`[SITEMAP] Error generating sitemap for ${o} page ${s}:`,t),[]}finally{i.delete(n)}}));export{s as default};
//# sourceMappingURL=urls.get.mjs.map
