import{d as e,v as r,c as t,a as o,e as s,g as a,r as i}from"../../../_/nitro.mjs";import{d as n,a as p,h as u,s as c}from"../../../_/apiKeyService.mjs";import"fs";import"os";import"path";import"url";import"http";import"https";import"events";import"zlib";import"@fastify/busboy";import"jsonwebtoken";import"node-forge";import"crypto";import"jwks-rsa";import"bcryptjs";import"mongoose";import"lru-cache";import"@unocss/core";import"@unocss/preset-wind3";import"devalue";import"consola";import"unhead";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"unhead/server";import"unhead/plugins";import"unhead/utils";import"vue-bundle-renderer/runtime";import"vue/server-renderer";import"node:path";import"node:crypto";const m=e((async e=>{if("OPTIONS"===e.method)return new Response(null,{status:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"}});if(!r(e,["GET","POST","DELETE"]))return t("Method not allowed",405);try{switch(e.method){case"POST":return await d(e);case"GET":return await l(e);case"DELETE":return await y(e);default:return t("Method not allowed",405)}}catch(e){return console.error("❌ API Key endpoint error:",e),t("Internal server error",500)}})),d=o((async(e,r,o)=>{try{const a=await i(e),{apiKey:n}=a;if(!n)return t("API key is required");const p=await c(r.uid,n,o);return p.success?s({message:p.message,lastSaved:p.lastSaved}):t(p.message,400)}catch(e){return console.error("❌ Error in handleSaveApiKey:",e),t("Failed to save API key. Please try again.",500)}})),l=o((async(e,r)=>{try{const o=a(e);if("true"===o.full){const e=await p(r.uid);return e.success?s({apiKey:e.apiKey,lastSaved:e.lastSaved}):t(e.message||"API key not found",404)}{const e=await u(r.uid);if(!e.hasKey)return s({hasKey:!1});const t=await p(r.uid);if(!t.success||!t.apiKey)return s({hasKey:!1});const o=t.apiKey.length>12?t.apiKey.substring(0,8)+"..."+t.apiKey.substring(t.apiKey.length-4):t.apiKey.substring(0,4)+"...";return s({hasKey:!0,apiKey:o,lastSaved:e.lastSaved})}}catch(e){return console.error("❌ Error in handleGetApiKey:",e),t("Failed to retrieve API key information",500)}})),y=o((async(e,r)=>{try{const e=await n(r.uid);return e.success?s({message:e.message}):t(e.message,400)}catch(e){return console.error("❌ Error in handleDeleteApiKey:",e),t("Failed to delete API key. Please try again.",500)}}));export{m as default};
//# sourceMappingURL=api-key.mjs.map
