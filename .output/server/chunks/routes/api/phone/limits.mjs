import{d as t,s as r,g as e,h as o}from"../../../_/nitro.mjs";import{a as i}from"../../../_/apiKeyService.mjs";import{I as s}from"../../../_/ipRateLimiterService.mjs";import"fs";import"os";import"path";import"url";import"http";import"https";import"events";import"zlib";import"@fastify/busboy";import"jsonwebtoken";import"node-forge";import"crypto";import"jwks-rsa";import"bcryptjs";import"mongoose";import"lru-cache";import"@unocss/core";import"@unocss/preset-wind3";import"devalue";import"consola";import"unhead";import"node:http";import"node:https";import"node:events";import"node:buffer";import"vue";import"node:fs";import"node:url";import"unhead/server";import"unhead/plugins";import"unhead/utils";import"vue-bundle-renderer/runtime";import"vue/server-renderer";import"node:path";import"node:crypto";const n=t((async t=>{var n;r(t,{"Cache-Control":"no-cache, no-store, must-revalidate, max-age=0",Pragma:"no-cache",Expires:"0"});try{const r=(null==(n=t.node.req.headers["x-forwarded-for"])?void 0:n.toString().split(",")[0])||t.node.req.socket.remoteAddress||"unknown",a=e(t).auth;let m=!1;if(a)try{m=!0}catch(t){console.error("Invalid auth token:",t)}const p=await o(t),u=new s(p.success),c=await u.getRequestCount(r);let d=!1,l=null;p.success&&p.user&&(l=await i(p.user.uid),d=l.success&&!!l.apiKey);const h={success:!0,ip:"unknown"===r?"unknown":r,authenticated:m,hasApiKey:d,limits:{current:c.count,maximum:c.max,remaining:Math.max(0,c.max-c.count),restartsInSeconds:c.restartsIn,restartsInMinutes:Math.ceil(c.restartsIn/60)}};return(null==l?void 0:l.rateLimitInfo)&&(h.apiKeyLimits=l.rateLimitInfo),h}catch(t){return console.error("Error getting IP limits:",t),{success:!1,error:"Failed to retrieve rate limit information",limits:{current:0,maximum:20,remaining:20,restartsInSeconds:0,restartsInMinutes:0}}}}));export{n as default};
//# sourceMappingURL=limits.mjs.map
